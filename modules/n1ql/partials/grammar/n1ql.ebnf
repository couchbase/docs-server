/***************
 * Expressions *
 ***************/

expr ::= literal |
         identifier |
         arithmetic-term |
         comparison-term |
         concatenation-term |
         logical-term |
         case-expr |
         collection-expr |
         construction-expr |
         nested-expr |
         function-call | /* inc window function */
         subquery-expr |
         '(' expr ')'

/* Logical Terms */

logical-term ::= and | or | not

/* tag::and[] */
and ::= condition 'AND' condition
/* end::and[] */

/* tag::or[] */
or ::= condition 'OR' condition
/* end::or[] */

/* tag::not[] */
not ::= 'NOT' condition
/* end::not[] */

/* Collection Expressions */

collection-expr ::= exists-expr | in-expr | within-expr | range-cond | range-xform

/* tag::exists-expr[] */
exists-expr ::= 'EXISTS' expr
/* end::exists-expr[] */

/* tag::in-expr[] */
in-expr ::= search-expr 'NOT'? 'IN' target-expr
/* end::in-expr[] */

/* tag::within-expr[] */
within-expr ::= search-expr 'NOT'? 'WITHIN' target-expr
/* end::within-expr[] */

/* tag::range-cond[] */
range-cond ::= ( ( 'ANY' | 'SOME' ) ( 'AND' 'EVERY' )? | 'EVERY' )
               range 'SATISFIES' cond 'END'
/* end::range-cond[] */

/* tag::range-xform[] */
range-xform ::= ( ( 'ARRAY' | 'FIRST' ) | 'OBJECT' name-expr ':' ) var-expr
                'FOR' range ( 'WHEN' cond )? 'END'
/* end::range-xform[] */

/* tag::range[] */
range ::= ( name-var ':' )? var ( 'IN' | 'WITHIN' ) expr
    ( ',' ( name-var ':' )? var ( 'IN' | 'WITHIN' ) expr )*
/* end::range[] */

search-expr ::= expr
target-expr ::= expr
var-expr ::= expr
name-expr ::= expr
var ::= identifier
name-var ::= identifier
