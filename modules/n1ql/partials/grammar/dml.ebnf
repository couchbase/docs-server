/* Data Manipulation Language */

dml-statement ::= delete
                | insert
                | merge
                | update
                | upsert

/********************
 * Delete Statement *
 ********************/

/* tag::delete[] */
delete ::= 'DELETE' 'FROM' target-keyspace use-keys-clause? where-clause?
            limit-clause? returning-clause?
/* end::delete[] */

/********************
 * Insert Statement *
 ********************/

/* tag::insert[] */
insert ::= 'INSERT' 'INTO' target-keyspace ( insert-values | insert-select )
            returning-clause?
/* end::insert[] */

/* tag::insert-values[] */
insert-values ::= ( '(' 'PRIMARY'? 'KEY' ',' 'VALUE' ( ',' 'OPTIONS' )? ')' )? values-clause
/* end::insert-values[] */

/* tag::values-clause[] */
values-clause ::= 'VALUES'  '(' key ',' value ( ',' options )? ')'
            ( ',' 'VALUES'? '(' key ',' value ( ',' options )? ')' )*
/* end::values-clause[] */

/* tag::insert-select[] */
insert-select ::= '(' 'PRIMARY'? 'KEY' key ( ',' 'VALUE' value )?
                   ( ',' 'OPTIONS' options )? ')' select
/* end::insert-select[] */

/*******************
 * Merge Statement *
 *******************/

/* tag::merge[] */
merge ::= 'MERGE' 'INTO' ( ansi-merge | lookup-merge ) limit-clause? returning-clause?
/* end::merge[] */

/* tag::ansi-merge[] */
ansi-merge ::= target-keyspace use-index-clause 'USING' ansi-merge-source
               ansi-merge-predicate ansi-merge-actions
/* end::ansi-merge[] */

/* tag::ansi-merge-source[] */
ansi-merge-source ::= ( merge-source-keyspace | merge-source-subquery | merge-source-expr )
                      ansi-join-hints?
/* end::ansi-merge-source[] */

/* tag::ansi-merge-predicate[] */
ansi-merge-predicate ::= 'ON' expr
/* end::ansi-merge-predicate[] */

/* tag::ansi-merge-actions[] */
ansi-merge-actions ::= merge-update? merge-delete? ansi-merge-insert?
/* end::ansi-merge-actions[] */

/* tag::ansi-merge-insert[] */
ansi-merge-insert ::= 'WHEN' 'NOT' 'MATCHED' 'THEN' 'INSERT' '(' 'KEY'? key
                      ( ',' 'VALUE'? value )? ( ',' 'OPTIONS'? options )? ')' where-clause?
/* end::ansi-merge-insert[] */

/* tag::lookup-merge[] */
lookup-merge ::= target-keyspace 'USING' lookup-merge-source lookup-merge-predicate
                 lookup-merge-actions
/* end::lookup-merge[] */

/* tag::lookup-merge-source[] */
lookup-merge-source ::= merge-source-keyspace use-clause? |
                        merge-source-subquery |
                        merge-source-expr
/* end::lookup-merge-source[] */

/* tag::lookup-merge-predicate[] */
lookup-merge-predicate ::= 'ON' 'PRIMARY'? 'KEY' expr
/* end::lookup-merge-predicate[] */

/* tag::lookup-merge-actions[] */
lookup-merge-actions ::= merge-update? merge-delete? lookup-merge-insert?
/* end::lookup-merge-actions[] */

/* tag::lookup-merge-insert[] */
lookup-merge-insert ::= 'WHEN' 'NOT' 'MATCHED' 'THEN' 'INSERT' expr where-clause?
/* end::lookup-merge-insert[] */

/* tag::merge-source-keyspace[] */
merge-source-keyspace ::= keyspace-ref ( 'AS'? alias )?
/* end::merge-source-keyspace[] */

/* tag::merge-source-subquery[] */
merge-source-subquery ::= subquery-expr 'AS'? alias
/* end::merge-source-subquery[] */

/* tag::merge-source-expr[] */
merge-source-expr ::= expr ( 'AS'? alias )?
/* end::merge-source-expr[] */

/* tag::merge-update[] */
merge-update ::= 'WHEN' 'MATCHED' 'THEN' 'UPDATE' set-clause? unset-clause? where-clause?
/* end::merge-update[] */

/* tag::merge-delete[] */
merge-delete ::= 'WHEN' 'MATCHED' 'THEN' 'DELETE' where-clause?
/* end::merge-delete[] */

/********************
 * Update Statement *
 ********************/

/* tag::update[] */
update ::= 'UPDATE' target-keyspace use-keys? set-clause? unset-clause?
            where-clause? limit-clause? returning-clause?
/* end::update[] */

/********************
 * Upsert Statement *
 ********************/

/* tag::upsert[] */
upsert ::= 'UPSERT' 'INTO' target-keyspace ( insert-values | insert-select )
            returning-clause?
/* end::upsert[] */

/******************
 * Common Clauses *
 ******************/

/* tag::target-keyspace[] */
target-keyspace ::= keyspace-ref ( 'AS'? alias )?
/* end::target-keyspace[] */

/* tag::returning-clause[] */
returning-clause ::= 'RETURNING' (result-expr (',' result-expr)* |
                    ('RAW' | 'ELEMENT' | 'VALUE') expr)
/* end::returning-clause[] */

/* tag::set-clause[] */
set-clause ::= 'SET' ( meta '=' expiration | path '=' expr update-for? )
               ( ',' ( meta '=' expiration | path '=' expr update-for? ) )*
/* end::set-clause[] */

/* tag::unset-clause[] */
unset-clause ::= 'UNSET' path update-for? (',' path update-for?)*
/* end::unset-clause[] */

/* tag::update-for[] */
update-for ::= ('FOR' (name-var ':')? var ('IN' | 'WITHIN') path
               (','   (name-var ':')? var ('IN' | 'WITHIN') path)* )+
               ('WHEN' cond)? 'END'
/* end::update-for[] */

key ::= expr
value ::= expr
options ::= object